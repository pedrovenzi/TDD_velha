        -:    0:Source:velha.cpp
        -:    0:Graph:velha.gcno
        -:    0:Data:velha.gcda
        -:    0:Runs:0
        -:    0:Source is newer than graph
        -:    1:// Copyright 2021 Pedro Venzi
        -:    2:/**
        -:    3: * \file  velha.cpp
        -:    4: */
        -:    5:
        -:    6:
        -:    7:#include "velha.hpp"
        -:    8:#include <iostream>
        -:    9:#include <cstdlib>
        -:   10:
        -:   11:/** 
        -:   12: * @brief Verifica a Situação do Jogo da Velha
        -:   13: * @author Pedro Venzi
        -:   14: * @param  velha representa uma imagem estática da disposição de um Jogo da Velha em um dado momento.
        -:   15: * 
        -:   16: *  Dada uma imagem estática (estado) de um Jogo da Velha, a função verifica o resultado de um jogo
        -:   17: *  caso ele já tenha acabado, confere a plausibilidade da aparição de tal estado ao decorrer de um jogo,
        -:   18: *  e checa se o jogo ainda está em andamento.
        -:   19: */ 
        -:   20:
    #####:   21:int VerificaVelha(int velha[3][3]) {
        -:   22:  int linha = 0;
    #####:   23:  int coluna = 0;
    #####:   24:  int x_cont = 0;
    #####:   25:  int o_cont = 0;
    #####:   26:  int vazio_cont = 0;
    #####:   27:  int jogadas[9];
        -:   28:
        -:   29:  for (linha = 0; linha < 3; linha++) {
    #####:   30:    for (coluna = 0; coluna < 3; coluna++) {
    #####:   31:      // Contagem de X, O, e espaços vazios
        -:   32:      if (velha[linha][coluna] == 1) {
    #####:   33:        x_cont++;
    #####:   34:      }
        -:   35:      if (velha[linha][coluna] == 2) {
    #####:   36:        o_cont++;
    #####:   37:      }
        -:   38:      if (velha[linha][coluna] == 0) {
    #####:   39:        vazio_cont++;
    #####:   40:      }
        -:   41:
        -:   42:      // Preenchimento do Array de Jogadas
        -:   43:      if (coluna == 0) {
    #####:   44:        jogadas[linha*3] = velha[linha][coluna];
    #####:   45:      }
        -:   46:      if (coluna == 1) {
    #####:   47:        jogadas[linha*3 + 1] = velha[linha][coluna];
    #####:   48:      }
        -:   49:      if (coluna == 2) {
    #####:   50:        jogadas[linha*3 + 2] = velha[linha][coluna];
    #####:   51:      }
        -:   52:    }
        -:   53:  }
        -:   54:
        -:   55:  // Verificação de Jogo em Turnos. Se não estiver em Turnos, Jogo Impossível
        -:   56:  if (abs(x_cont) - abs(o_cont) < 2) {
    #####:   57:    int condicao_vitoria_x = 0;
        -:   58:    int condicao_vitoria_o = 0;
    #####:   59:
    #####:   60:    // Contagem de Condições de Vitória
        -:   61:    if ((jogadas[2] == jogadas[5]) && (jogadas[5] == jogadas[8])) {
        -:   62:      if (jogadas[2] == 1) {
    #####:   63:        condicao_vitoria_x++;
    #####:   64:      } else if (jogadas[2] == 2) {
    #####:   65:        condicao_vitoria_o++;
    #####:   66:      }
    #####:   67:    }
        -:   68:    if ((jogadas[1] == jogadas[4]) && (jogadas[4] == jogadas[7])) {
        -:   69:      if (jogadas[1] == 1) {
    #####:   70:        condicao_vitoria_x++;
    #####:   71:      } else if (jogadas[1] == 2) {
    #####:   72:        condicao_vitoria_o++;
    #####:   73:      }
    #####:   74:    }
        -:   75:    if ((jogadas[0] == jogadas[3]) && (jogadas[3] == jogadas[6])) {
        -:   76:      if (jogadas[0] == 1) {
    #####:   77:        condicao_vitoria_x++;
    #####:   78:      } else if (jogadas[0] == 2) {
    #####:   79:        condicao_vitoria_o++;
    #####:   80:      }
    #####:   81:    }
        -:   82:    if ((jogadas[0] == jogadas[4]) && (jogadas[4] == jogadas[8])) {
        -:   83:      if (jogadas[0] == 1) {
    #####:   84:        condicao_vitoria_x++;
    #####:   85:      } else if (jogadas[0] == 2) {
    #####:   86:        condicao_vitoria_o++;
    #####:   87:      }
    #####:   88:    }
        -:   89:    if ((jogadas[2] == jogadas[4]) && (jogadas[4] == jogadas[6])) {
        -:   90:      if (jogadas[2] == 1) {
    #####:   91:        condicao_vitoria_x++;
    #####:   92:      } else if (jogadas[2] == 2) {
    #####:   93:        condicao_vitoria_o++;
    #####:   94:      }
    #####:   95:    }
        -:   96:    if ((jogadas[6] == jogadas[7]) && (jogadas[7] == jogadas[8])) {
        -:   97:      if (jogadas[6] == 1) {
    #####:   98:        condicao_vitoria_x++;
    #####:   99:      } else if (jogadas[6] == 2) {
    #####:  100:        condicao_vitoria_o++;
    #####:  101:      }
    #####:  102:    }
        -:  103:    if ((jogadas[3] == jogadas[4]) && (jogadas[4] == jogadas[5])) {
        -:  104:      if (jogadas[3] == 1) {
    #####:  105:        condicao_vitoria_x++;
    #####:  106:      } else if (jogadas[3] == 2) {
    #####:  107:        condicao_vitoria_o++;
    #####:  108:      }
    #####:  109:    }
        -:  110:    if ((jogadas[0] == jogadas[1]) && (jogadas[1] == jogadas[2])) {
        -:  111:      if (jogadas[0] == 1) {
    #####:  112:        condicao_vitoria_x++;
    #####:  113:      } else if (jogadas[0] == 2) {
    #####:  114:        condicao_vitoria_o++;
    #####:  115:      }
    #####:  116:    }
        -:  117:
        -:  118:    if ((condicao_vitoria_x > 0) || (condicao_vitoria_o > 0)) {
        -:  119:      // Verificação de Vitórias Simultânes e Duplicadas
        -:  120:      if (((condicao_vitoria_x > 1) || (condicao_vitoria_o > 1)) ||
    #####:  121:         ((condicao_vitoria_x == 1) && (condicao_vitoria_o == 1))) {
        -:  122:        return -2;
    #####:  123:      }
    #####:  124:      // Verificação de Vitórias Singulares e Legítimas
        -:  125:      if (condicao_vitoria_x == 1) {
        -:  126:        return 1;
    #####:  127:      } else if (condicao_vitoria_o == 1) {
    #####:  128:        return 2;
    #####:  129:      }
    #####:  130:
        -:  131:    } else {
        -:  132:      // Verificação de Empates e Indeterminações
        -:  133:      if (vazio_cont == 0) {
        -:  134:        return 0;
    #####:  135:      } else {
    #####:  136:        return -1;
        -:  137:      }
    #####:  138:    }
        -:  139:  } else {
        -:  140:    return -2;
        -:  141:  }
    #####:  142:  return 0;
        -:  143:}
